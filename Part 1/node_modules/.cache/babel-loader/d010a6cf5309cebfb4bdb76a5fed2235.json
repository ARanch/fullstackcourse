{"ast":null,"code":"var _jsxFileName = \"/Users/ranch/Documents/code/full_stack_course/Part 1/src/App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Header = props => {\n  // header component\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Header;\n\nconst Content = props =>\n/*#__PURE__*/\n// Content component\n// props.map(prop => <Part part={props.part} exercise={props.exercise}/>) // kan man måske gøre det iterativt...?\n_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(Part, {\n    part: props[0].name,\n    exercises: props[0].exercises\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this)\n}, void 0, false);\n\n_c2 = Content;\n\nconst Part = props =>\n/*#__PURE__*/\n// Part component\n_jsxDEV(\"div\", {\n  children: [props.name, \" \", props.exercises]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 3\n}, this);\n\n_c3 = Part;\n\nconst Total = props =>\n/*#__PURE__*/\n// total component\n_jsxDEV(\"p\", {\n  children: [\"Number of exercises \", props.ex1 + props.ex2 + props.ex3]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 24,\n  columnNumber: 3\n}, this);\n\n_c4 = Total;\n\nconst App = () => {\n  const course = 'Half Stack application development'; // refactor\n\n  const parts = [{\n    name: 'Fundamentals of React',\n    exercises: 10\n  }, {\n    name: 'Using props to pass data',\n    exercises: 7\n  }, {\n    ame: 'State of a component',\n    exercises: 14\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: course\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      parts: parts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Total, {\n      parts: parts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_c5 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"Part\");\n$RefreshReg$(_c4, \"Total\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["Header","props","console","log","text","Content","name","exercises","Part","Total","ex1","ex2","ex3","App","course","parts","ame"],"sources":["/Users/ranch/Documents/code/full_stack_course/Part 1/src/App.js"],"sourcesContent":["const Header = (props) => {\n  // header component\n  console.log(props)\n  return <h1>{props.text}</h1>\n}\n\nconst Content = (props) => (\n  // Content component\n  // props.map(prop => <Part part={props.part} exercise={props.exercise}/>) // kan man måske gøre det iterativt...?\n  <>\n    <Part part={props[0].name} exercises={props[0].exercises}/>\n  </>\n)\n\nconst Part = (props) => (\n  // Part component\n  <div>\n    {props.name} {props.exercises}\n  </div>\n)\n\nconst Total = (props) => (\n  // total component\n  <p>Number of exercises {props.ex1 + props.ex2 + props.ex3}</p>\n)\n\nconst App = () => {\n  const course = 'Half Stack application development'\n  // refactor\n  const parts = [\n  {\n    name: 'Fundamentals of React',\n    exercises: 10\n  },\n  {\n    name: 'Using props to pass data',\n    exercises: 7\n  },\n  {\n    ame: 'State of a component',\n    exercises: 14\n  }\n]\n\n\n  return (\n    <div>\n      <Header text={course}/>\n      <Content parts={parts}/>\n      <Total parts={parts}/>  \n    </div>\n  )\n}\n\nexport default App"],"mappings":";;;;AAAA,MAAMA,MAAM,GAAIC,KAAD,IAAW;EACxB;EACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACA,oBAAO;IAAA,UAAKA,KAAK,CAACG;EAAX;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAJD;;KAAMJ,M;;AAMN,MAAMK,OAAO,GAAIJ,KAAD;AAAA;AACd;AACA;AACA;EAAA,uBACE,QAAC,IAAD;IAAM,IAAI,EAAEA,KAAK,CAAC,CAAD,CAAL,CAASK,IAArB;IAA2B,SAAS,EAAEL,KAAK,CAAC,CAAD,CAAL,CAASM;EAA/C;IAAA;IAAA;IAAA;EAAA;AADF,iBAHF;;MAAMF,O;;AAQN,MAAMG,IAAI,GAAIP,KAAD;AAAA;AACX;AACA;EAAA,WACGA,KAAK,CAACK,IADT,OACgBL,KAAK,CAACM,SADtB;AAAA;EAAA;EAAA;EAAA;AAAA,QAFF;;MAAMC,I;;AAON,MAAMC,KAAK,GAAIR,KAAD;AAAA;AACZ;AACA;EAAA,mCAAwBA,KAAK,CAACS,GAAN,GAAYT,KAAK,CAACU,GAAlB,GAAwBV,KAAK,CAACW,GAAtD;AAAA;EAAA;EAAA;EAAA;AAAA,QAFF;;MAAMH,K;;AAKN,MAAMI,GAAG,GAAG,MAAM;EAChB,MAAMC,MAAM,GAAG,oCAAf,CADgB,CAEhB;;EACA,MAAMC,KAAK,GAAG,CACd;IACET,IAAI,EAAE,uBADR;IAEEC,SAAS,EAAE;EAFb,CADc,EAKd;IACED,IAAI,EAAE,0BADR;IAEEC,SAAS,EAAE;EAFb,CALc,EASd;IACES,GAAG,EAAE,sBADP;IAEET,SAAS,EAAE;EAFb,CATc,CAAd;EAgBA,oBACE;IAAA,wBACE,QAAC,MAAD;MAAQ,IAAI,EAAEO;IAAd;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,OAAD;MAAS,KAAK,EAAEC;IAAhB;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,KAAD;MAAO,KAAK,EAAEA;IAAd;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CA1BD;;MAAMF,G;AA4BN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}